install.packages("glmnet")
head(seismic.train)
summary(seismic)
head(y.train)
head(x.train)
predict(seismic.ridge, newdata = x.test)
predict(seismic.ridge, newx = x.test)
)
ridge.pred
head(ridge.pred)
head(ridge.pred)
head(ridge.pred)
dim(x.test)
warnings()
seismic.ridge
seismic.lasso
length(lasso.pred)
length(ridge.pred)
length(multinom.pred)
length(seismic.test$type)
length(y.test)
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
error.tab
install.packages("randomForest")
y.hat <- rf.pred
dat
head(y.hat)
rm(randomForest)
y.hat <- rf.pred
head(y.hat)
y.hat
y
head(rf.pred)
y.hat == y
y <- y.test
y.hat == y
rate
length(y)
dat
rate
dat
head(lasso.pred)
y.hat <- predict(seismic.ridge, newx = x.test, type = "class")
dat
y == y.hat
summary(ridge.pred)
summary(y.test)
summary(y.train)
error.rate(y.test, multinom.pred)
summary(ridge.pred)
seismic.ridge
summary(lasso.pred)
help(plot.gmlnet)
help(plot.gmlnet)
summary(lasso.pred)
dim(y.test)
length(y.test)
summary(y.train.bin)
summary(y.train.bin)
y.train.bin
summary(y.train.bin)
summary(y.train)
train.inds
summary(y.train)
summary(train.inds)
summary(y.train)
summary(train.inds)
summary(y.train)
head(y.train)
head(y.train) == "earthquake"
class(y.train)
head(train.inds)
y.train
dim(y.train)
length(y.train)
y.train
head(train.inds)
summary(train.inds)
summary(train.inds)
head(y.train.bin)
summary(y.train)
summary(y.train)
summary(y.train)
summary(y.train)
summary(y.train)
summary(y.train)
summary(y.train)
summary(w)
summary(factor(w))
summary(y.train)
summary(y.train)
summary(y.test)
length(ridge.pred)
length(y.test)
2204 + 2 + 2 + 6
levels(y)
summary(y.test)
class(lasso.pred)
class(ridge.pred)
summary(ridge.pred)
summary(ridge.pred)
summary(ridge.pred)
coef(seismic.ridge)
summary(ridge.pred)
summary(y.train)
summary(y.test)
summary(y.test)
summary(y.train)
table(y.train)
w
w
weights["quarry blast"]
head(w)
summary(factor(w))
weights
weights
weights
weights
weights
summary(factor(w))
weights
weights
weights
weights
weights
summary(factor(w))
summary(y.train)
summary(y.train)
summary(y.train)
summary(y.train)
summary(y.train)
summary(y.train)
summary(y.train)
)
summary(y.train)
k <- 3
mods
errors
erros[[1]]$error
errors[[1]]$error
errors[[1]]
mods[[1]]$error
errors
error.list[[1]]
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
summary(y.train)
summary(y.train)
summary(seismic$type)
summary(seismic$type)
summary(seismic)
class(seismic$type)
y <- y.test
y.hat <- ridge.pred
dat
summary(y.hat)
pred
names(counts)
pred
dat
dat
rate
summary(y.train)
Ridge
y.hat <- lasso.pred
pred
counts
counts
pred
counts
pred
names(counts)
counts
pred
knit2html("seismicModelling.Rmd")
install.packages("caret")
install.packages("e1071")
q()
n
library(MASS)
head(seismic)
prop.tab.mag
sum(prop.tab.mag$Freq)
attach(seismic)
colSums(prop.table(table(type, cut(mag, 4))))
head(seismic)
head(seismic)
dim(prop.mag.depth)
prop.tab <- data.frame(rbind(prop.tab.mag, prop.tab.depth,
                             prop.tab.rms))
nrow(prop.tab.rms)
nrow(prop.tab.depth)
nrow(prop.tab.mag)
head(prop.tab)
colnames(read.csv("seismic_data.csv"))
summary(seismic)
x.train <- as.matrix(seismic.train[,-1])
y.train <- seismic.train[,1]
x.test <- as.matrix(seismic.test[,-1])
y.test <- seismic.test[,1]
summary(y.train)
names(err)
summary(y.test)
summary(y.test)[1] / length(y.test)
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
log(seismic.ridge$lambda.min)
help(cv.glmnet)
help(glmnet)
names(err.ridge)
summary(err.ridge)
err.ridge
names(err.ridge)
err.ridge$overall
help(geocode)
library(maps)
help(geocode)
library(ggmaps)
library(ggmap)
help(geocode)
foo <- head(read.csv("seismic_data.csv"))
foo
latlog <- paste(foo[1,]$lat, foo[1,]$long, sep = ",")
latlog
latlong <- paste(foo[1,]$lat, foo[1,]$long, sep = ",")
geocode(latlong)
geocode(latlong, output = "more"))
geocode(latlong, output = "more")
revgeocode(latlong, output = "more")
latlong
latlong2 <- unlist(strsplit(latlong, ","))
longlong2
latlong2
revgeocode(latlong2)
latlong2 <- as.numeric(unlist(strsplit(latlong, ",")))
revgeocode(latlong2)
help(revgeocode)
latlongvec
latlong2
geocode("WVU")
latlong <- paste(foo[1,]$long, foo[1,]$lat, sep = ",")
latlong2 <- as.numeric(unlist(strsplit(latlong, ",")))
latlong2
revgeocode(latlong2)
distQueryCheck()
geoQueryCheck()
geocodeQueryCheck()
revgeocode(latlong2, override_limit=TRUE)
geocodeQueryCheck()
revgeocode(latlong2, override_limit=TRUE)
geocodeQueryCheck()
log(seismic.ridge$lambda.min)
log(seismic.lasso$lambda.min)
exp(-10)
exp(5)
exp((-10):4)
round(exp((-10):4), 3)
round(exp((-10):(-4)), 3)
round(exp((-10):(-4)), 5)
log(0.01)
summary(lasso.pred)
summary(lasso.pred)
summary(ridge.pred)
log(3.640251e-05)
seismic.lasso
help(plot.glmnet)
help(plot.cvglmnet)
help(plot.cv.glmnet)
help(predict.cv.glmnet)
help(glmnet)
help(cv.glmnet)
seismic.ridge <- cv.glmnet(x.train, y.train, family = "multinomial",
                           alpha = 0, lambda = seq(0, 1, .00001))
length(seq(0, 1, .05)
)
length(seq(0, 1, .005))
help(cv.glmnet)
help(glmnet)
seismic.ridge
summary(seismic.ridge)
seismic.ridge
summary(ridge.pred)
exp(-10)
round(exp(-10), 6)
round(exp(-10), 5)
round(exp(-10), 4)
round(exp(-6), 4)
round(exp(-2), 4)
exp(0)
log(0)
log(0.0000001)
class(seismic.rf)
help(plot.randomForest)
help(varImpPlot)
help(importance)
knit2html("seismicModelling.Rmd")
plot(1:100, exp(1:100))
plot(seq(0, 1, .01), exp(seq(0, 1, .01)))
plot(seq(0, 10, .01), exp(seq(0, 1, .01)))
plot(seq(0, 10, .01), exp(seq(0, 10, .01)))
plot(seq(0, 10, .01), log(seq(0, 10, .01)))
help(plot.cv.glmnet)
plot(log(0, 10, .01), (seq(0, 10, .01)))
plot(log(seq(0, 10, .01)), (seq(0, 10, .01)))
names(seismic.ridge)
seismic.ridge)
seismic.ridge
seismic.ridge$glm
head(seismic.ridge$glm)
names(seismic.ridge$glm)
(seismic.ridge$glm$lambda)
(seismic.ridge$glm$dev)
names(seismic.ridge$glmnet.fit
)
print.cv.glmnet()
print.cv.glmnet
print.glmnet
plot.cv.glmnet
seismic.ridge$cvm
names(seismic.ridge)
cvobj <- seismic.ridge
plot.args = list(x = sign.lambda * log(cvobj$lambda), y = cvobj$cvm, 
        ylim = range(cvobj$cvup, cvobj$cvlo), xlab = xlab, ylab = cvobj$name, 
        type = "n")
    new.args = list(...)
    if (length(new.args)) 
        plot.args[names(new.args)] = new.args
    do.call("plot", plot.args)
    error.bars(sign.lambda * log(cvobj$lambda), cvobj$cvup, cvobj$cvlo, 
        width = 0.01, col = "darkgrey")
    points(sign.lambda * log(cvobj$lambda), cvobj$cvm, pch = 20, 
        col = "red")
    axis(side = 3, at = sign.lambda * log(cvobj$lambda), labels = paste(cvobj$nz), 
        tick = FALSE, line = 0)
    abline(v = sign.lambda * log(cvobj$lambda.min), lty = 3)
    abline(v = sign.lambda * log(cvobj$lambda.1se), lty = 3)
sign.lambda <- 1
plot.args = list(x = sign.lambda * log(cvobj$lambda), y = cvobj$cvm, 
        ylim = range(cvobj$cvup, cvobj$cvlo), xlab = xlab, ylab = cvobj$name, 
        type = "n")
    new.args = list(...)
    if (length(new.args)) 
        plot.args[names(new.args)] = new.args
    do.call("plot", plot.args)
    error.bars(sign.lambda * log(cvobj$lambda), cvobj$cvup, cvobj$cvlo, 
        width = 0.01, col = "darkgrey")
    points(sign.lambda * log(cvobj$lambda), cvobj$cvm, pch = 20, 
        col = "red")
    axis(side = 3, at = sign.lambda * log(cvobj$lambda), labels = paste(cvobj$nz), 
        tick = FALSE, line = 0)
    abline(v = sign.lambda * log(cvobj$lambda.min), lty = 3)
    abline(v = sign.lambda * log(cvobj$lambda.1se), lty = 3)
plot.cv.glmnet
seismic.ridge$cvup
seismic.ridge$cvlo
seismic.ridge$cvm
plot.cv.glmnet
glmnet.obj <- seismic$ridge
cv.glmnet.obj <- seismic$ridge
head(dat)
head(dat)
cv.glmnet.obj <- seismic.ridge
head(dat)
cv.obj <- seismic.ridge
}
seismic.lasso
cv.obj <- seismic.lasso
ggnet(seismic.lass)
ggnet(seismic.lasso)
knit2html("seismicModelling.Rmd")
rm(cv.obj)
foo <- function(bar) print bar
foo <- function(bar) print(bar)
foo(3)
cv.obj
foo(bar)
foo(bar)
foo(3)
foo(3)
foo(1:3)
cv.obj <- seismic.ridge
knit2html("seismicModelling.Rmd")
rm(cv.obj)
rm(cv.obj)
knit2html("seismicModelling.Rmd")
plot.cv.glmnet
cv.obj <- seismic.ridge
head(dat)
rm(cv.obj)
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knit2html("seismicModelling.Rmd")
knn.pred
help(svm)
seismic.svm
head(seismic.train)
nrow(seismic.train)
plot(cmdscale(dist(seismic.train[,-1])),
     col = as.integer(seismic.train[,1]),
     pch = c("0", "+")[1:7086 %in% seismic.svm$index + 1])
plot(cmdscale(dist(seismic.train[,-1])),
     col = as.integer(seismic.train[,1]),
     pch = c("0", "+")[1:7086 %in% seismic.svm$index + 1])
help(plot.svm)
length(knn.pred)
length(y.test)
help(predict.svm)
help(svm)
help(tune.knn)
help(best.tune)
seismic.knn
help(knn.cv)
names(k)
best.tune(k)
k$best.param
help(tune.knn)
help(tunecontrol)
help(tune)
help(tune.control)
k
help(knn)
k
names(k)
k$best.parameters
k$best.parameters[1]
length(knn.pred)
k
knn.params
knn.params
knn.params
knn.params
knn.params
svm.params
svm.params
names(svm.params)
svm.params
help(cv.glmnet)
help(glmnet)
summary(fit1)
names(fit1)
1*10^(-1)
help(trainControl)
seismic.lasso$lambda
range(seismic.lasso$lambda)
range(seismic.lasso$ridge)
range(seismic.ridge$lambda)
range(seismic.lasso$lambda)
install.packages("doMC")
foo
names(foo)
foo$finalModel
names(seismic.enet)
seismic.enet$modelInfo
names(seismic.enet)
seismic.enet$bestTune
seismic.enet$pred
seismic.enet$modelType
fitted(seismic.enet)
class(seismic.enet)
class(as.glmnet(seismic.enet))
class(seismic.lasso)
class(seismic.enet)
seismic.enet
vector(mode = list, length = 1)
vector(mode = "list", length = 1)
vector(mode = "list", length = 2)
vector(mode = "list", length = 3)
list(length = 3)
list()
data(iris)
createFolds(iris$species)
grepl("cv", "adaptive_cv")
seeds
length(seeds)
seeds
help(train)
help(glmnet)
levels(enet.pred)
levels(enet.pred)
levels(lasso.pred)
seismic.enet$lambda.1se
seismic.enet$lambda.min
help(glmnet)
knit2html("seismicModelling.Rmd")
q()
n
knit2html("seismicModelling.Rmd")
q()
n
knit2html("seismicModelling.Rmd")
q()
n
